# app/api.py
from fastapi import FastAPI
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
import aiogram
from app.handlers import router
from app.middlewares import DbSessionMiddleware
from app.database import init_db, async_session
from app.trading import TradingBot
from app.models import User
from sqlalchemy import select
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import logging
import os
import asyncio

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

# –í—ã–≤–æ–¥–∏–º –≤–µ—Ä—Å–∏—é aiogram –≤ –ª–æ–≥–∏
logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è aiogram: {aiogram.__version__}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=os.getenv("BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º router –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.include_router(router)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp.update.middleware(DbSessionMiddleware())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
trading_bot = TradingBot()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()

async def run_autotrading():
    logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    async with async_session() as session:
        try:
            result = await session.execute(
                select(User.user_id).where(
                    (User.tinkoff_token != None) & (User.autotrading_enabled == True)
                ).distinct()
            )
            user_ids = [row[0] for row in result.fetchall()]
            for user_id in user_ids:
                await trading_bot.analyze_and_trade(session, user_id)
                try:
                    await bot.send_message(user_id, "ü§ñ –ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –¥–ª—è –≤–∞—à–∏—Ö –∞–∫—Ü–∏–π!")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")

@app.on_event("startup")
async def on_startup():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.warning("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏ –Ω–∞—á–∏–Ω–∞–µ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω, –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
    logger.info("–ó–∞–ø—É—Å–∫ polling –Ω–∞ Heroku")
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    asyncio.create_task(dp.start_polling(bot))
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    scheduler.add_job(run_autotrading, "interval", minutes=5)
    scheduler.start()

@app.on_event("shutdown")
async def on_shutdown():
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    scheduler.shutdown()
    await bot.session.close()

@app.post("/signals")
async def receive_signal(signal: dict):
    ticker = signal.get("ticker")
    signal_type = signal.get("signal_type")
    value = signal.get("value")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {ticker} - {signal_type} - {value}")
    return {"status": "received"}