import os
import logging
from fastapi import FastAPI, HTTPException
from aiogram import Bot, Dispatcher
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from app.database import get_session
from app.handlers import router as handlers_router
from app.middlewares import DbSessionMiddleware
from app.models import Subscription
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from pydantic import BaseModel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(title="Stock Market Bot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

session = AiohttpSession()
bot = Bot(token=BOT_TOKEN, session=session, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
dp.include_router(handlers_router)
dp.message.middleware(DbSessionMiddleware())

# –ú–æ–¥–µ–ª—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
class Signal(BaseModel):
    ticker: str
    signal_type: str
    value: float

# –ó–∞–ø—É—Å–∫ polling –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def on_startup():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω, –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
        raise

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@app.get("/test-db")
async def test_db():
    try:
        async with get_session() as session:
            result = await session.execute(select(Subscription))
            await session.commit()
            return {"status": "Database connection successful", "subscriptions_count": len(result.scalars().all())}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
@app.post("/signals")
async def receive_signal(signal: Signal, session: AsyncSession = Depends(get_session)):
    try:
        # –ù–∞–π—Ç–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ç–∏–∫–µ—Ä–∞
        subscriptions = await session.execute(
            select(Subscription).where(Subscription.ticker == signal.ticker)
        )
        subscriptions = subscriptions.scalars().all()

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for sub in subscriptions:
            message = f"üìä –°–∏–≥–Ω–∞–ª –¥–ª—è {signal.ticker}: {signal.signal_type} (–∑–Ω–∞—á–µ–Ω–∏–µ: {signal.value})"
            try:
                await bot.send_message(chat_id=sub.user_id, text=message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id}: {e}")

        return {"status": "Signal processed", "notified_users": len(subscriptions)}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=f"Signal processing error: {str(e)}")
