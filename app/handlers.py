from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from sqlalchemy.ext.asyncio import AsyncSession
import logging
from app.models import Stock, Subscription, Signal, User, TradeHistory, FigiStatus
from sqlalchemy import select, func
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import os
import asyncio
import html
from typing import Optional
import aiohttp

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ tinkoff-invest
try:
    import tinkoff
    from tinkoff.invest import AsyncClient, CandleInterval, InstrumentIdType, OrderDirection
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    logger.info(f"–ú–æ–¥—É–ª—å tinkoff-invest —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ handlers.py, –≤–µ—Ä—Å–∏—è: {tinkoff.invest.__version__}")
except ImportError as e:
    logging.basicConfig(level=logging.ERROR)
    logger = logging.getLogger(__name__)
    logger.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ tinkoff.invest –≤ handlers.py. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ tinkoff-invest —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ requirements.txt.")
    raise ImportError("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ tinkoff.invest. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ tinkoff-invest —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ requirements.txt.") from e
from tinkoff.invest.exceptions import InvestError

router = Router()

def get_main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìà –ê–∫—Ü–∏–∏", callback_data="stocks_menu")],
        [InlineKeyboardButton(text="ü§ñ –¢–æ—Ä–≥–æ–≤–ª—è", callback_data="trading_menu")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")],
    ])
    return keyboard

def get_stocks_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∞–∫—Ü–∏–∏", callback_data="list_stocks"),
         InlineKeyboardButton(text="üìà –í—Å–µ –∞–∫—Ü–∏–∏", callback_data="list_all_stocks")],
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É", callback_data="check_price"),
         InlineKeyboardButton(text="üìâ –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã", callback_data="price_chart")],
        [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe"),
         InlineKeyboardButton(text="üìä –°–∏–≥–Ω–∞–ª—ã —Ä–æ—Å—Ç–∞", callback_data="signals")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ])
    return keyboard

def get_trading_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è", callback_data="autotrading_menu"),
         InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="trade_history")],
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
         InlineKeyboardButton(text="üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="daily_stats")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ])
    return keyboard

def get_settings_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω", callback_data="set_token")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ])
    return keyboard

def get_autotrading_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="view_profile")],
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å", callback_data="enable_autotrading"),
         InlineKeyboardButton(text="‚èπÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="disable_autotrading")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_trading")],
    ])
    return keyboard

async def calculate_indicators(prices: list) -> tuple:
    if len(prices) < 20:
        return None, None, None, None, None

    # RSI (14 –¥–Ω–µ–π)
    gains = [max(0, prices[i] - prices[i-1]) for i in range(1, len(prices[-14:]))]
    losses = [max(0, prices[i-1] - prices[i]) for i in range(1, len(prices[-14:]))]
    avg_gain = sum(gains) / 14 if gains else 0
    avg_loss = sum(losses) / 14 if losses else 0
    rs = avg_gain / avg_loss if avg_loss else float('inf')
    rsi = 100 - (100 / (1 + rs)) if rs != float('inf') else 100

    # MACD (EMA 12, 26, Signal 9)
    ema_12 = sum(prices[-12:]) / 12
    ema_26 = sum(prices[-26:]) / 26 if len(prices) >= 26 else ema_12
    macd = ema_12 - ema_26
    signal = sum(prices[-9:]) / 9 if len(prices) >= 9 else macd
    histogram = macd - signal

    # Bollinger Bands (20 –¥–Ω–µ–π)
    sma = sum(prices[-20:]) / 20
    std = (sum((p - sma) ** 2 for p in prices[-20:]) / 20) ** 0.5
    upper_band = sma + 2 * std
    lower_band = sma - 2 * std

    return rsi, macd, signal, upper_band, lower_band

async def fetch_figi_with_retry(client: AsyncClient, ticker: str, max_retries: int = 3) -> Optional[str]:
    for attempt in range(max_retries):
        try:
            cleaned_ticker = ticker.replace(".ME", "")
            instrument = await client.instruments.share_by(
                id_type=InstrumentIdType.INSTRUMENT_ID_TYPE_TICKER,
                class_code="TQBR",
                id=cleaned_ticker
            )
            return instrument.instrument.figi
        except InvestError as e:
            if "RESOURCE_EXHAUSTED" in str(e):
                reset_time = int(e.metadata.ratelimit_reset) if e.metadata.ratelimit_reset else 60
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ {reset_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(reset_time)
            else:
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FIGI –¥–ª—è {ticker}: {e}")
                break
        except Exception as e:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {ticker}: {e}")
            break
    return None

@router.message(Command("start"))
async def cmd_start(message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    welcome_text = (
        "üåü <b>StockBot ‚Äî –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ MOEX!</b> üåü\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ü–∏—è–º–∏ –∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å! üöÄ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )
    await message.answer(welcome_text, parse_mode="HTML", reply_markup=get_main_menu())

@router.callback_query(lambda c: c.data == "stocks_menu")
async def stocks_menu(callback_query: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∞–∫—Ü–∏–π")
    await callback_query.message.answer("üìà <b>–ú–µ–Ω—é –∞–∫—Ü–∏–π:</b>", parse_mode="HTML", reply_markup=get_stocks_menu())
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "trading_menu")
async def trading_menu(callback_query: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–ª–∏")
    await callback_query.message.answer("ü§ñ <b>–ú–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>", parse_mode="HTML", reply_markup=get_trading_menu())
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "settings_menu")
async def settings_menu(callback_query: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    await callback_query.message.answer("‚öôÔ∏è <b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:</b>", parse_mode="HTML", reply_markup=get_settings_menu())
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback_query: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await callback_query.message.answer("üåü –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_main_menu())
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "back_to_trading")
async def back_to_trading(callback_query: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–ª–∏")
    await callback_query.message.answer("ü§ñ <b>–ú–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>", parse_mode="HTML", reply_markup=get_trading_menu())
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "list_stocks")
async def list_stocks(callback_query: CallbackQuery, session: AsyncSession):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∞–∫—Ü–∏–π")
    try:
        result = await session.execute(
            select(Subscription.ticker).where(Subscription.user_id == user_id)
        )
        subscribed_tickers = result.scalars().all()

        if not subscribed_tickers:
            await callback_query.message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∞–∫—Ü–∏—é. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' –≤ –º–µ–Ω—é –∞–∫—Ü–∏–π.")
            return

        result = await session.execute(
            select(Stock).where(Stock.ticker.in_(subscribed_tickers))
        )
        stocks = result.scalars().all()

        if not stocks:
            await callback_query.message.answer("–ê–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        response = "üìã <b>–í–∞—à–∏ –∞–∫—Ü–∏–∏:</b>\n\n"
        for stock in stocks:
            price = stock.last_price if stock.last_price is not None else "N/A"
            response += f"üîπ {stock.ticker}: {stock.name} ({price} RUB)\n"
        response += "\n‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–∫—Ü–∏–π."
        await callback_query.message.answer(response, parse_mode="HTML", reply_markup=get_stocks_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ü–∏–π: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ü–∏–π.")
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "list_all_stocks")
async def list_all_stocks(callback_query: CallbackQuery, session: AsyncSession):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ü–∏–π")
    try:
        result = await session.execute(select(Stock))
        stocks = result.scalars().all()

        if not stocks:
            await callback_query.message.answer("–í –±–∞–∑–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback_query.answer()
            return

        response = "üìà <b>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ü–∏–∏:</b>\n\n"
        for stock in stocks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º figi_status, –µ—Å–ª–∏ None, —Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∫ "UNKNOWN"
            status = stock.figi_status if stock.figi_status else "UNKNOWN"
            status_icon = "‚úÖ" if status == "SUCCESS" else "‚ö†Ô∏è" if status == "PENDING" else "‚ùå"
            price = stock.last_price if stock.last_price is not None else "N/A"
            response += f"{status_icon} {stock.ticker} - {stock.name} | –¶–µ–Ω–∞: {price} RUB\n"

        response += "\n‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–∫—Ü–∏–π."
        await callback_query.message.answer(response, parse_mode="HTML", reply_markup=get_stocks_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∞–∫—Ü–∏–π: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ü–∏–π.")
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "check_price")
async def prompt_check_price(callback_query: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} —Ö–æ—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É")
    await callback_query.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER.ME):")
    await callback_query.answer()

@router.message(lambda message: message.text and message.text.endswith(".ME"))
async def check_price(message: Message, session: AsyncSession):
    user_id = message.from_user.id
    ticker = message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ü–µ–Ω—É –¥–ª—è {ticker}")

    try:
        user_result = await session.execute(
            select(User).where(User.user_id == user_id)
        )
        user = user_result.scalars().first()
        if not user or not user.tinkoff_token:
            await message.answer("üîë –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω T-Invest API. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
            return

        stock_result = await session.execute(
            select(Stock).where(Stock.ticker == ticker)
        )
        stock = stock_result.scalars().first()
        if not stock:
            await message.answer(f"–ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
            return

        async with AsyncClient(user.tinkoff_token) as client:
            figi = stock.figi
            if not figi:
                logger.warning(f"FIGI –¥–ª—è {ticker} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...")
                figi = await fetch_figi_with_retry(client, ticker)
                if not figi:
                    await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FIGI –¥–ª—è {ticker}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return
                stock.figi = figi
                stock.set_figi_status(FigiStatus.SUCCESS)
                session.add(stock)
                await session.commit()

            try:
                orderbook = await client.market_data.get_order_book(
                    figi=figi,
                    depth=1
                )
                if orderbook.bids and orderbook.bids[0].price:
                    price = orderbook.bids[0].price.units + orderbook.bids[0].price.nano / 1e9
                    stock.last_price = price
                    session.add(stock)
                    await session.commit()
                    await message.answer(f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {ticker}: {price} RUB", reply_markup=get_stocks_menu())
                else:
                    await message.answer(f"–¶–µ–Ω–∞ –¥–ª—è {ticker} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
            except InvestError as e:
                logger.error(f"–û—à–∏–±–∫–∞ Tinkoff API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã –¥–ª—è {ticker}: {e}")
                await message.answer(f"–û—à–∏–±–∫–∞ API Tinkoff: {html.escape(str(e))}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã –¥–ª—è {ticker}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {html.escape(str(e))}.")

@router.callback_query(lambda c: c.data == "price_chart")
async def prompt_price_chart(callback_query: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} —Ö–æ—á–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã")
    await callback_query.message.answer("üìâ –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER.ME) –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:")
    await callback_query.answer()

@router.message(lambda message: message.text.endswith(".ME"))
async def generate_price_chart(message: Message, session: AsyncSession):
    user_id = message.from_user.id
    ticker = message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –¥–ª—è {ticker}")

    try:
        user_result = await session.execute(
            select(User).where(User.user_id == user_id)
        )
        user = user_result.scalars().first()
        if not user or not user.tinkoff_token:
            await message.answer("üîë –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω T-Invest API. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
            return

        stock_result = await session.execute(
            select(Stock).where(Stock.ticker == ticker)
        )
        stock = stock_result.scalars().first()
        if not stock:
            await message.answer(f"–ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
            return

        async with AsyncClient(user.tinkoff_token) as client:
            figi = stock.figi
            if not figi:
                logger.warning(f"FIGI –¥–ª—è {ticker} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...")
                figi = await fetch_figi_with_retry(client, ticker)
                if not figi:
                    await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FIGI –¥–ª—è {ticker}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return
                stock.figi = figi
                stock.set_figi_status(FigiStatus.SUCCESS)
                session.add(stock)
                await session.commit()

            end_date = datetime.utcnow()
            start_date = end_date - timedelta(days=30)
            try:
                candles = await client.market_data.get_candles(
                    figi=figi,
                    from_=start_date,
                    to=end_date,
                    interval=CandleInterval.CANDLE_INTERVAL_DAY
                )
            except InvestError as e:
                logger.error(f"–û—à–∏–±–∫–∞ Tinkoff API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è {ticker}: {e}")
                await message.answer(f"–û—à–∏–±–∫–∞ API Tinkoff: {html.escape(str(e))}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            if not candles.candles:
                await message.answer(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            if len(candles.candles) < 5:
                await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ {ticker} (–Ω–∞–π–¥–µ–Ω–æ {len(candles.candles)} —Å–≤–µ—á–µ–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 5).")
                return

            dates = [candle.time for candle in candles.candles]
            prices = [candle.close.units + candle.close.nano / 1e9 for candle in candles.candles]

            plt.figure(figsize=(10, 5))
            plt.plot(dates, prices, marker='o', linestyle='-', color='b')
            plt.title(f"–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã {ticker} (30 –¥–Ω–µ–π)")
            plt.xlabel("–î–∞—Ç–∞")
            plt.ylabel("–¶–µ–Ω–∞ (RUB)")
            plt.grid(True)
            plt.xticks(rotation=45)
            plt.tight_layout()

            chart_path = f"chart_{user_id}_{ticker.replace('.ME', '')}.png"
            plt.savefig(chart_path)
            plt.close()

            try:
                chart_file = FSInputFile(chart_path)
                await message.answer_photo(chart_file, caption=f"üìâ –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –¥–ª—è {ticker}", reply_markup=get_stocks_menu())
            finally:
                try:
                    os.remove(chart_path)
                    logger.info(f"–§–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ {chart_path} —É–¥–∞–ª—ë–Ω")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ {chart_path}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {ticker}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {html.escape(str(e))}.")

@router.callback_query(lambda c: c.data == "subscribe")
async def prompt_subscribe(callback_query: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} —Ö–æ—á–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–∫—Ü–∏—é")
    await callback_query.message.answer("üîî –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SBER.ME) –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:")
    await callback_query.answer()

@router.message(lambda message: message.text and message.text.endswith(".ME") and not message.reply_to_message)
async def subscribe_to_stock(message: Message, session: AsyncSession):
    user_id = message.from_user.id
    ticker = message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {ticker}")

    try:
        user_result = await session.execute(
            select(User).where(User.user_id == user_id)
        )
        user = user_result.scalars().first()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        stock_result = await session.execute(
            select(Stock).where(Stock.ticker == ticker)
        )
        stock = stock_result.scalars().first()
        if not stock:
            await message.answer(f"–ê–∫—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
            return

        result = await session.execute(
            select(Subscription).where(Subscription.user_id == user_id, Subscription.ticker == ticker)
        )
        if result.scalars().first():
            await message.answer(f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {ticker}.")
            return

        subscription = Subscription(user_id=user_id, ticker=ticker)
        session.add(subscription)
        await session.commit()
        await message.answer(f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {ticker}!", reply_markup=get_stocks_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ {ticker}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {html.escape(str(e))}.")

@router.callback_query(lambda c: c.data == "signals")
async def list_signals(callback_query: CallbackQuery, session: AsyncSession):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–∏–≥–Ω–∞–ª—ã —Ä–æ—Å—Ç–∞")

    try:
        result = await session.execute(
            select(Signal).where(Signal.user_id == user_id).order_by(Signal.created_at.desc()).limit(10)
        )
        signals = result.scalars().all()

        if not signals:
            await callback_query.message.answer("üìä –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–æ—Å—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π.")
            return

        response = "üìä <b>–°–∏–≥–Ω–∞–ª—ã —Ä–æ—Å—Ç–∞:</b>\n\n"
        for signal in signals:
            response += f"üîπ {signal.ticker}: {signal.price} RUB ({signal.created_at.strftime('%Y-%m-%d %H:%M')})\n"
        response += "\n‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–∫—Ü–∏–π."
        await callback_query.message.answer(response, parse_mode="HTML", reply_markup=get_stocks_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.")
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "autotrading_menu")
async def autotrading_menu(callback_query: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏")
    await callback_query.message.answer("ü§ñ <b>–ú–µ–Ω—é –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏:</b>", parse_mode="HTML", reply_markup=get_autotrading_menu())
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "view_profile")
async def view_profile(callback_query: CallbackQuery, session: AsyncSession):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ñ–∏–ª—å")
    try:
        user_result = await session.execute(
            select(User).where(User.user_id == user_id)
        )
        user = user_result.scalars().first()
        if not user:
            await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        token_set = "–î–∞" if user.tinkoff_token else "–ù–µ—Ç"
        response = (
            f"üìä <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"ID: {user_id}\n"
            f"–¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {token_set}\n"
        )
        await callback_query.message.answer(response, parse_mode="HTML", reply_markup=get_autotrading_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "enable_autotrading")
async def enable_autotrading(callback_query: CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏")
    try:
        user_result = await session.execute(
            select(User).where(User.user_id == user_id)
        )
        user = user_result.scalars().first()
        if not user or not user.tinkoff_token:
            await callback_query.message.answer("üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω T-Invest API –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
            return
        from app.trading import TradingBot
        trading_bot = TradingBot(bot)
        if user_id in trading_bot.stream_tasks:
            await callback_query.message.answer("ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
            return
        task = asyncio.create_task(trading_bot.stream_and_trade(user_id))
        trading_bot.stream_tasks[user_id] = task
        await callback_query.message.answer("ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞!", reply_markup=get_autotrading_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏.")
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "disable_autotrading")
async def disable_autotrading(callback_query: CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏")
    from app.trading import TradingBot
    trading_bot = TradingBot(bot)
    trading_bot.stop_streaming(user_id)
    await callback_query.message.answer("‚èπÔ∏è –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=get_autotrading_menu())
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "trade_history")
async def trade_history(callback_query: CallbackQuery, session: AsyncSession):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤")
    try:
        result = await session.execute(
            select(TradeHistory).where(TradeHistory.user_id == user_id).order_by(TradeHistory.created_at.desc()).limit(10)
        )
        trades = result.scalars().all()

        if not trades:
            await callback_query.message.answer("üìú –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤ –ø—É—Å—Ç–∞.")
            return

        response = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤:</b>\n\n"
        for trade in trades:
            action = "–ü–æ–∫—É–ø–∫–∞" if trade.action == "buy" else "–ü—Ä–æ–¥–∞–∂–∞"
            response += f"üîπ {trade.ticker}: {action} ({trade.price} RUB x {trade.quantity}) - {trade.total} RUB ({trade.created_at.strftime('%Y-%m-%d %H:%M')})\n"
        response += "\n‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–ª–∏."
        await callback_query.message.answer(response, parse_mode="HTML", reply_markup=get_trading_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "balance")
async def check_balance(callback_query: CallbackQuery, session: AsyncSession):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –±–∞–ª–∞–Ω—Å")
    try:
        user_result = await session.execute(
            select(User).where(User.user_id == user_id)
        )
        user = user_result.scalars().first()
        if not user or not user.tinkoff_token:
            await callback_query.message.answer("üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω T-Invest API –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
            return

        async with AsyncClient(user.tinkoff_token) as client:
            accounts = await client.users.get_accounts()
            if not accounts.accounts:
                await callback_query.message.answer("‚ö†Ô∏è –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            account_id = accounts.accounts[0].id
            portfolio = await client.operations.get_portfolio(account_id=account_id)
            balance = portfolio.total_amount_currencies.units + portfolio.total_amount_currencies.nano / 1e9
            await callback_query.message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} RUB", reply_markup=get_trading_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "daily_stats")
async def daily_stats(callback_query: CallbackQuery, session: AsyncSession):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    try:
        from app.trading import TradingBot
        trading_bot = TradingBot(None)
        stats = await trading_bot.calculate_daily_profit(session, user_id)
        today = datetime.utcnow().date()
        response = (
            f"üìÖ <b>–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({today.strftime('%Y-%m-%d')}):</b>\n\n"
            f"üîÑ –°–¥–µ–ª–æ–∫: {stats['total_trades']}\n"
            f"üìâ –ü–æ–∫—É–ø–æ–∫: {stats['total_buy']:.2f} RUB\n"
            f"üìà –ü—Ä–æ–¥–∞–∂: {stats['total_sell']:.2f} RUB\n"
            f"üìä –ü—Ä–∏–±—ã–ª—å: {stats['profit']:.2f} RUB\n"
            f"\n‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–ª–∏."
        )
        await callback_query.message.answer(response, parse_mode="HTML", reply_markup=get_trading_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "set_token")
async def prompt_set_token(callback_query: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} —Ö–æ—á–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")
    await callback_query.message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω T-Invest API:")
    await callback_query.answer()

@router.message(lambda message: message.reply_to_message and message.reply_to_message.text == "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω T-Invest API:")
async def set_token(message: Message, session: AsyncSession):
    user_id = message.from_user.id
    token = message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–æ–∫–µ–Ω")
    try:
        user_result = await session.execute(
            select(User).where(User.user_id == user_id)
        )
        user = user_result.scalars().first()
        if not user:
            user = User(user_id=user_id, tinkoff_token=token)
            session.add(user)
        else:
            user.tinkoff_token = token
            session.add(user)
        await session.commit()
        await message.answer("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_settings_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–∞.")