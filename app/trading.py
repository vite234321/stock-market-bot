# app/trading.py
import logging
import asyncio
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from app.models import Stock, Subscription, TradeHistory, User
from datetime import datetime, timedelta
from tinkoff.invest import AsyncClient, OrderDirection, OrderType, CandleInterval, InstrumentIdType
from tinkoff.invest.exceptions import InvestError
from aiogram import Bot

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TradingBot:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.status = "–û–∂–∏–¥–∞–Ω–∏–µ"

    async def debug_available_shares(self, client: AsyncClient):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π."""
        try:
            response = await client.instruments.shares()
            for instrument in response.instruments:
                if instrument.class_code == "TQBR":
                    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–π —Ç–∏–∫–µ—Ä: {instrument.ticker}, FIGI: {instrument.figi}, –ù–∞–∑–≤–∞–Ω–∏–µ: {instrument.name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ü–∏–π: {e}")

    async def update_figi(self, client: AsyncClient, stock: Stock, session: AsyncSession):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç FIGI –¥–ª—è –∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Tinkoff API, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ."""
        try:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ä, —É–±–∏—Ä–∞—è .ME
            original_ticker = stock.ticker
            stock.ticker = stock.ticker.replace('.ME', '')
            if original_ticker != stock.ticker:
                logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–∏–∫–µ—Ä: {original_ticker} -> {stock.ticker}")
                session.add(stock)
                await session.commit()

            response = await client.instruments.share_by(
                id_type=InstrumentIdType.INSTRUMENT_ID_TYPE_TICKER,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                class_code="TQBR",
                id=stock.ticker
            )
            stock.figi = response.instrument.figi
            session.add(stock)
            await session.commit()
            logger.info(f"FIGI –¥–ª—è {stock.ticker} –æ–±–Ω–æ–≤–ª—ë–Ω: {stock.figi}")
            return stock.figi
        except InvestError as e:
            if "NOT_FOUND" in str(e):
                logger.error(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {stock.ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API")
                return None
            elif "RESOURCE_EXHAUSTED" in str(e):
                reset_time = int(e.metadata.ratelimit_reset) if e.metadata.ratelimit_reset else 60
                logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API, –æ–∂–∏–¥–∞–Ω–∏–µ {reset_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(reset_time)
                response = await client.instruments.share_by(
                    id_type=InstrumentIdType.INSTRUMENT_ID_TYPE_TICKER,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                    class_code="TQBR",
                    id=stock.ticker
                )
                stock.figi = response.instrument.figi
                session.add(stock)
                await session.commit()
                logger.info(f"FIGI –¥–ª—è {stock.ticker} –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: {stock.figi}")
                return stock.figi
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å FIGI –¥–ª—è {stock.ticker}: {e}")
                return None
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å FIGI –¥–ª—è {stock.ticker}: {e}")
            return None

    async def analyze_and_trade(self, session: AsyncSession, user_id: int):
        logger.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        self.status = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫"
        logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.status}")

        try:
            user_result = await session.execute(
                select(User).where(User.user_id == user_id)
            )
            user = user_result.scalars().first()
            if not user or not user.tinkoff_token:
                logger.error(f"–¢–æ–∫–µ–Ω T-Invest API –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                self.status = "–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
                await self.bot.send_message(user_id, "‚ùå –¢–æ–∫–µ–Ω T-Invest API –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
                return

            async with AsyncClient(user.tinkoff_token) as client:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π
                await self.debug_available_shares(client)

                accounts = await client.users.get_accounts()
                if not accounts.accounts:
                    logger.error(f"–°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    self.status = "–û—à–∏–±–∫–∞: —Å—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    await self.bot.send_message(user_id, "‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω T-Invest API.")
                    return
                account_id = accounts.accounts[0].id

                portfolio = await client.operations.get_portfolio(account_id=account_id)
                total_balance = portfolio.total_amount_currencies.units + portfolio.total_amount_currencies.nano / 1e9
                logger.info(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {total_balance} RUB")

                positions = await client.operations.get_positions(account_id=account_id)
                holdings = {pos.figi: pos.quantity.units for pos in positions.securities}

                all_stocks_result = await session.execute(select(Stock))
                all_stocks = all_stocks_result.scalars().all()

                if not all_stocks:
                    logger.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
                    self.status = "–ù–µ—Ç –∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                    await self.bot.send_message(user_id, "üìâ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.")
                    return

                self.status = "–ò—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
                logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.status}")
                await self.bot.send_message(user_id, "üîç –ë–æ—Ç –∏—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏...")

                for stock in all_stocks:
                    figi = stock.figi
                    if not figi:
                        logger.warning(f"FIGI –¥–ª—è {stock.ticker} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...")
                        figi = await self.update_figi(client, stock, session)
                        if not figi:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FIGI –¥–ª—è {stock.ticker}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                            continue

                    end_date = datetime.utcnow()
                    start_date = end_date - timedelta(days=30)
                    logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è {stock.ticker} (FIGI: {figi})")
                    try:
                        candles = await client.market_data.get_candles(
                            figi=figi,
                            from_=start_date,
                            to=end_date,
                            interval=CandleInterval.CANDLE_INTERVAL_DAY
                        )
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(candles.candles)} —Å–≤–µ—á–µ–π –¥–ª—è {stock.ticker}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è {stock.ticker}: {e}")
                        continue

                    if not candles.candles:
                        logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–≤–µ—á–∞—Ö –¥–ª—è {stock.ticker}")
                        continue

                    prices = [candle.close.units + candle.close.nano / 1e9 for candle in candles.candles]
                    if len(prices) < 5:
                        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {stock.ticker}")
                        continue

                    sma = sum(prices[-5:]) / 5
                    current_price = stock.last_price
                    volume = stock.volume if stock.volume else 0

                    trend_up = prices[-1] > prices[-2] > prices[-3]
                    if current_price < sma and trend_up and volume > 10000:
                        quantity = min(int(total_balance // current_price), 10)
                        if quantity > 0:
                            total_cost = quantity * current_price
                            if total_cost <= total_balance:
                                order_response = await client.orders.post_order(
                                    account_id=account_id,
                                    figi=figi,
                                    quantity=quantity,
                                    direction=OrderDirection.ORDER_DIRECTION_BUY,
                                    order_type=OrderType.ORDER_TYPE_MARKET
                                )
                                logger.info(f"–ö—É–ø–ª–µ–Ω–æ {quantity} –∞–∫—Ü–∏–π {stock.ticker} –ø–æ —Ü–µ–Ω–µ {current_price} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                                self.status = f"–°–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É: {quantity} –∞–∫—Ü–∏–π {stock.ticker}"
                                await self.bot.send_message(user_id, f"üìà –ö—É–ø–ª–µ–Ω–æ {quantity} –∞–∫—Ü–∏–π {stock.ticker} –ø–æ —Ü–µ–Ω–µ {current_price} RUB")
                                trade = TradeHistory(
                                    user_id=user_id,
                                    ticker=stock.ticker,
                                    action="buy",
                                    price=current_price,
                                    quantity=quantity,
                                    total=total_cost,
                                    created_at=datetime.utcnow()
                                )
                                session.add(trade)
                                await session.commit()

                    trend_down = prices[-1] < prices[-2] < prices[-3]
                    if current_price > sma * 1.10 and trend_down:
                        available_to_sell = holdings.get(figi, 0)
                        if available_to_sell > 0:
                            quantity = min(available_to_sell, 10)
                            total_revenue = quantity * current_price
                            order_response = await client.orders.post_order(
                                account_id=account_id,
                                figi=figi,
                                quantity=quantity,
                                direction=OrderDirection.ORDER_DIRECTION_SELL,
                                order_type=OrderType.ORDER_TYPE_MARKET
                            )
                            logger.info(f"–ü—Ä–æ–¥–∞–Ω–æ {quantity} –∞–∫—Ü–∏–π {stock.ticker} –ø–æ —Ü–µ–Ω–µ {current_price} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            self.status = f"–°–æ–≤–µ—Ä—à–∏–ª –ø—Ä–æ–¥–∞–∂—É: {quantity} –∞–∫—Ü–∏–π {stock.ticker}"
                            await self.bot.send_message(user_id, f"üìâ –ü—Ä–æ–¥–∞–Ω–æ {quantity} –∞–∫—Ü–∏–π {stock.ticker} –ø–æ —Ü–µ–Ω–µ {current_price} RUB")
                            trade = TradeHistory(
                                user_id=user_id,
                                ticker=stock.ticker,
                                action="sell",
                                price=current_price,
                                quantity=quantity,
                                total=total_revenue,
                                created_at=datetime.utcnow()
                            )
                            session.add(trade)
                            await session.commit()

                    await asyncio.sleep(0.5)

                self.status = "–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞"
                logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.status}")
                await self.bot.send_message(user_id, "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏...")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            self.status = f"–û—à–∏–±–∫–∞: {str(e)}"
            await self.bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏: {str(e)}")
            raise

    def get_status(self):
        return self.status