# app/trading.py
import logging
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from app.models import Stock, Subscription, TradeHistory, User
from datetime import datetime, timedelta
from tinkoff.invest import AsyncClient, OrderDirection, OrderType, CandleInterval
from aiogram import Bot

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ú–∞–ø–ø–∏–Ω–≥ ticker -> FIGI
TICKER_TO_FIGI = {
    "SBER.ME": "BBG004730N88",
    "GAZP.ME": "BBG004730RP0",
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–∫–µ—Ä—ã –∏ –∏—Ö FIGI
}

class TradingBot:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.status = "–û–∂–∏–¥–∞–Ω–∏–µ"

    async def analyze_and_trade(self, session: AsyncSession, user_id: int):
        logger.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        self.status = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫"
        logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.status}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(
                select(User).where(User.user_id == user_id)
            )
            user = user_result.scalars().first()
            if not user or not user.tinkoff_token:
                logger.error(f"–¢–æ–∫–µ–Ω T-Invest API –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                self.status = "–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
                await self.bot.send_message(user_id, "‚ùå –¢–æ–∫–µ–Ω T-Invest API –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
                return

            async with AsyncClient(user.tinkoff_token) as client:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á—ë—Ç–µ
                accounts = await client.users.get_accounts()
                if not accounts.accounts:
                    logger.error(f"–°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    self.status = "–û—à–∏–±–∫–∞: —Å—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    await self.bot.send_message(user_id, "‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω T-Invest API.")
                    return
                account_id = accounts.accounts[0].id

                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
                portfolio = await client.operations.get_portfolio(account_id=account_id)
                total_balance = portfolio.total_amount_currencies.units + portfolio.total_amount_currencies.nano / 1e9
                logger.info(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {total_balance} RUB")

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
                positions = await client.operations.get_positions(account_id=account_id)
                holdings = {pos.figi: pos.quantity.units for pos in positions.securities}

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                all_stocks_result = await session.execute(select(Stock))
                all_stocks = all_stocks_result.scalars().all()

                if not all_stocks:
                    logger.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
                    self.status = "–ù–µ—Ç –∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                    await self.bot.send_message(user_id, "üìâ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.")
                    return

                self.status = "–ò—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
                logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.status}")
                await self.bot.send_message(user_id, "üîç –ë–æ—Ç –∏—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏...")

                for stock in all_stocks:
                    figi = TICKER_TO_FIGI.get(stock.ticker)
                    if not figi:
                        logger.warning(f"FIGI –¥–ª—è {stock.ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
                    end_date = datetime.utcnow()
                    start_date = end_date - timedelta(days=30)
                    candles = await client.market_data.get_candles(
                        figi=figi,
                        from_=start_date,
                        to=end_date,
                        interval=CandleInterval.CANDLE_INTERVAL_DAY
                    )

                    if not candles.candles:
                        logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–≤–µ—á–∞—Ö –¥–ª—è {stock.ticker}")
                        continue

                    prices = [candle.close.units + candle.close.nano / 1e9 for candle in candles.candles]
                    if len(prices) < 5:
                        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {stock.ticker}")
                        continue

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (SMA) –∑–∞ 5 –¥–Ω–µ–π
                    sma = sum(prices[-5:]) / 5
                    current_price = stock.last_price
                    volume = stock.volume if stock.volume else 0

                    # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–æ–∫—É–ø–∞–µ–º, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ SMA –∏ –µ—Å—Ç—å –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
                    trend_up = prices[-1] > prices[-2] > prices[-3]
                    if current_price < sma and trend_up and volume > 10000:
                        quantity = min(int(total_balance // current_price), 10)
                        if quantity > 0:
                            total_cost = quantity * current_price
                            if total_cost <= total_balance:
                                order_response = await client.orders.post_order(
                                    account_id=account_id,
                                    figi=figi,
                                    quantity=quantity,
                                    direction=OrderDirection.ORDER_DIRECTION_BUY,
                                    order_type=OrderType.ORDER_TYPE_MARKET
                                )
                                logger.info(f"–ö—É–ø–ª–µ–Ω–æ {quantity} –∞–∫—Ü–∏–π {stock.ticker} –ø–æ —Ü–µ–Ω–µ {current_price} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                                self.status = f"–°–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É: {quantity} –∞–∫—Ü–∏–π {stock.ticker}"
                                await self.bot.send_message(user_id, f"üìà –ö—É–ø–ª–µ–Ω–æ {quantity} –∞–∫—Ü–∏–π {stock.ticker} –ø–æ —Ü–µ–Ω–µ {current_price} RUB")
                                trade = TradeHistory(
                                    user_id=user_id,
                                    ticker=stock.ticker,
                                    action="buy",
                                    price=current_price,
                                    quantity=quantity,
                                    total=total_cost,
                                    created_at=datetime.utcnow()
                                )
                                session.add(trade)
                                await session.commit()

                    # –ü—Ä–æ–¥–∞–∂–∞: –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—à–µ SMA –Ω–∞ 10% –∏ –µ—Å—Ç—å –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
                    trend_down = prices[-1] < prices[-2] < prices[-3]
                    if current_price > sma * 1.10 and trend_down:
                        available_to_sell = holdings.get(figi, 0)
                        if available_to_sell > 0:
                            quantity = min(available_to_sell, 10)
                            total_revenue = quantity * current_price
                            order_response = await client.orders.post_order(
                                account_id=account_id,
                                figi=figi,
                                quantity=quantity,
                                direction=OrderDirection.ORDER_DIRECTION_SELL,
                                order_type=OrderType.ORDER_TYPE_MARKET
                            )
                            logger.info(f"–ü—Ä–æ–¥–∞–Ω–æ {quantity} –∞–∫—Ü–∏–π {stock.ticker} –ø–æ —Ü–µ–Ω–µ {current_price} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            self.status = f"–°–æ–≤–µ—Ä—à–∏–ª –ø—Ä–æ–¥–∞–∂—É: {quantity} –∞–∫—Ü–∏–π {stock.ticker}"
                            await self.bot.send_message(user_id, f"üìâ –ü—Ä–æ–¥–∞–Ω–æ {quantity} –∞–∫—Ü–∏–π {stock.ticker} –ø–æ —Ü–µ–Ω–µ {current_price} RUB")
                            trade = TradeHistory(
                                user_id=user_id,
                                ticker=stock.ticker,
                                action="sell",
                                price=current_price,
                                quantity=quantity,
                                total=total_revenue,
                                created_at=datetime.utcnow()
                            )
                            session.add(trade)
                            await session.commit()

                self.status = "–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞"
                logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.status}")
                await self.bot.send_message(user_id, "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏...")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            self.status = f"–û—à–∏–±–∫–∞: {str(e)}"
            await self.bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏: {str(e)}")
            raise

    def get_status(self):
        return self.status