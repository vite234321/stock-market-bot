# app/trading.py
import logging
import asyncio
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from app.models import Stock, Subscription, TradeHistory, User
from datetime import datetime, timedelta
from tinkoff.invest import AsyncClient, OrderDirection, OrderType, CandleInterval, InstrumentIdType
from tinkoff.invest.exceptions import InvestError
from aiogram import Bot
import html

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TradingBot:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.status = "–û–∂–∏–¥–∞–Ω–∏–µ"
        self.positions = {}  # –•—Ä–∞–Ω–∏–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {figi: {"entry_price": float, "quantity": int}}

    async def debug_available_shares(self, client: AsyncClient):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π."""
        try:
            response = await client.instruments.shares()
            for instrument in response.instruments:
                if instrument.class_code == "TQBR":
                    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–π —Ç–∏–∫–µ—Ä: {instrument.ticker}, FIGI: {instrument.figi}, –ù–∞–∑–≤–∞–Ω–∏–µ: {instrument.name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ü–∏–π: {e}")

    async def update_figi(self, client: AsyncClient, stock: Stock, session: AsyncSession):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ FIGI –≤ –±–∞–∑–µ. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å."""
        if stock.figi:
            return stock.figi
        logger.warning(f"FIGI –¥–ª—è {stock.ticker} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...")
        try:
            cleaned_ticker = stock.ticker.replace(".ME", "")
            response = await client.instruments.share_by(
                id_type=InstrumentIdType.INSTRUMENT_ID_TYPE_TICKER,
                class_code="TQBR",
                id=cleaned_ticker
            )
            stock.figi = response.instrument.figi
            session.add(stock)
            await session.commit()
            logger.info(f"FIGI –¥–ª—è {stock.ticker} –æ–±–Ω–æ–≤–ª—ë–Ω: {stock.figi}")
            return stock.figi
        except InvestError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å FIGI –¥–ª—è {stock.ticker}: {e}")
            return None

    def calculate_rsi(self, prices, period=14):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç RSI (Relative Strength Index)."""
        if len(prices) < period + 1:
            return None
        gains = []
        losses = []
        for i in range(1, len(prices)):
            change = prices[i] - prices[i-1]
            if change > 0:
                gains.append(change)
                losses.append(0)
            else:
                gains.append(0)
                losses.append(abs(change))
        avg_gain = sum(gains[-period:]) / period
        avg_loss = sum(losses[-period:]) / period
        if avg_loss == 0:
            return 100
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        return rsi

    def calculate_macd(self, prices, fast_period=12, slow_period=26, signal_period=9):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç MACD –∏ —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é."""
        if len(prices) < slow_period + signal_period:
            return None, None, None
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ (EMA)
        def ema(data, period):
            ema_values = []
            k = 2 / (period + 1)
            ema_values.append(sum(data[:period]) / period)  # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–∞—è —Å—Ä–µ–¥–Ω—è—è
            for i in range(period, len(data)):
                ema_value = data[i] * k + ema_values[-1] * (1 - k)
                ema_values.append(ema_value)
            return ema_values

        # EMA –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–æ–≤
        ema_fast = ema(prices, fast_period)
        ema_slow = ema(prices, slow_period)
        # MACD = EMA(fast) - EMA(slow)
        macd = [ema_fast[i] - ema_slow[i] for i in range(len(ema_fast))]
        # –°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è ‚Äî EMA MACD
        signal = ema(macd, signal_period)
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ = MACD - Signal
        histogram = [macd[i + signal_period - 1] - signal[i] for i in range(len(signal))]
        return macd[-1], signal[-1], histogram[-1]

    def calculate_atr(self, candles, period=14):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç ATR (Average True Range) –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏."""
        if len(candles) < period + 1:
            return None
        tr_values = []
        for i in range(1, len(candles)):
            high = candles[i].high.units + candles[i].high.nano / 1e9
            low = candles[i].low.units + candles[i].low.nano / 1e9
            prev_close = candles[i-1].close.units + candles[i-1].close.nano / 1e9
            tr = max(high - low, abs(high - prev_close), abs(low - prev_close))
            tr_values.append(tr)
        atr = sum(tr_values[-period:]) / period
        return atr

    async def analyze_and_trade(self, session: AsyncSession, user_id: int):
        logger.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        self.status = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫"
        logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.status}")

        try:
            user_result = await session.execute(
                select(User).where(User.user_id == user_id)
            )
            user = user_result.scalars().first()
            if not user or not user.tinkoff_token:
                logger.error(f"–¢–æ–∫–µ–Ω T-Invest API –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                self.status = "–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
                await self.bot.send_message(user_id, "‚ùå –¢–æ–∫–µ–Ω T-Invest API –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
                return

            async with AsyncClient(user.tinkoff_token) as client:
                await self.debug_available_shares(client)

                accounts = await client.users.get_accounts()
                if not accounts.accounts:
                    logger.error(f"–°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    self.status = "–û—à–∏–±–∫–∞: —Å—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    await self.bot.send_message(user_id, "‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω T-Invest API.")
                    return
                account_id = accounts.accounts[0].id

                portfolio = await client.operations.get_portfolio(account_id=account_id)
                total_balance = portfolio.total_amount_currencies.units + portfolio.total_amount_currencies.nano / 1e9
                logger.info(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {total_balance} RUB")

                positions = await client.operations.get_positions(account_id=account_id)
                holdings = {pos.figi: pos.quantity.units for pos in positions.securities}

                all_stocks_result = await session.execute(select(Stock))
                all_stocks = all_stocks_result.scalars().all()

                if not all_stocks:
                    logger.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
                    self.status = "–ù–µ—Ç –∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                    await self.bot.send_message(user_id, "üìâ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.")
                    return

                self.status = "–ò—â–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
                logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.status}")

                for stock in all_stocks:
                    figi = stock.figi
                    if not figi:
                        figi = await self.update_figi(client, stock, session)
                        if not figi:
                            logger.warning(f"FIGI –¥–ª—è {stock.ticker} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                            continue

                    end_date = datetime.utcnow()
                    start_date = end_date - timedelta(days=60)  # –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è {stock.ticker} (FIGI: {figi})")
                    try:
                        candles = await client.market_data.get_candles(
                            figi=figi,
                            from_=start_date,
                            to=end_date,
                            interval=CandleInterval.CANDLE_INTERVAL_DAY
                        )
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(candles.candles)} —Å–≤–µ—á–µ–π –¥–ª—è {stock.ticker}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è {stock.ticker}: {e}")
                        continue

                    if not candles.candles:
                        logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–≤–µ—á–∞—Ö –¥–ª—è {stock.ticker}")
                        continue

                    prices = [candle.close.units + candle.close.nano / 1e9 for candle in candles.candles]
                    if len(prices) < 35:  # –ù—É–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è MACD (26 + 9)
                        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {stock.ticker}")
                        continue

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    rsi = self.calculate_rsi(prices)
                    macd, signal, histogram = self.calculate_macd(prices)
                    atr = self.calculate_atr(candles.candles)
                    if rsi is None or macd is None or atr is None:
                        logger.warning(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {stock.ticker}")
                        continue

                    current_price = stock.last_price
                    if not current_price:
                        logger.warning(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è {stock.ticker} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                        continue

                    # –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∫—É–ø–∫–∏
                    buy_signal = False
                    if rsi < 30 and histogram > 0:  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å –∏ –±—ã—á—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MACD
                        buy_signal = True
                        logger.info(f"–°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É {stock.ticker}: RSI={rsi:.2f}, MACD Histogram={histogram:.2f}")

                    if buy_signal:
                        max_position_cost = total_balance * 0.1  # –ù–µ –±–æ–ª–µ–µ 10% –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É
                        quantity = min(int(max_position_cost // current_price), 10)
                        if quantity <= 0:
                            logger.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {stock.ticker}")
                            continue
                        total_cost = quantity * current_price
                        if total_cost <= total_balance:
                            order_response = await client.orders.post_order(
                                account_id=account_id,
                                figi=figi,
                                quantity=quantity,
                                direction=OrderDirection.ORDER_DIRECTION_BUY,
                                order_type=OrderType.ORDER_TYPE_MARKET
                            )
                            logger.info(f"–ö—É–ø–ª–µ–Ω–æ {quantity} –∞–∫—Ü–∏–π {stock.ticker} –ø–æ —Ü–µ–Ω–µ {current_price} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            self.status = f"–°–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É: {quantity} –∞–∫—Ü–∏–π {stock.ticker}"
                            await self.bot.send_message(user_id, f"üìà –ö—É–ø–ª–µ–Ω–æ {quantity} –∞–∫—Ü–∏–π {stock.ticker} –ø–æ —Ü–µ–Ω–µ {current_price} RUB")
                            trade = TradeHistory(
                                user_id=user_id,
                                ticker=stock.ticker,
                                action="buy",
                                price=current_price,
                                quantity=quantity,
                                total=total_cost,
                                created_at=datetime.utcnow()
                            )
                            session.add(trade)
                            await session.commit()
                            self.positions[figi] = {"entry_price": current_price, "quantity": quantity}

                    # –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–¥–∞–∂–∏
                    available_to_sell = holdings.get(figi, 0)
                    if available_to_sell > 0 and figi in self.positions:
                        position = self.positions[figi]
                        entry_price = position["entry_price"]
                        profit_percent = (current_price - entry_price) / entry_price * 100
                        loss_percent = (entry_price - current_price) / entry_price * 100
                        atr_multiplier = 2  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ATR –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                        dynamic_stop_loss = entry_price - atr * atr_multiplier
                        dynamic_take_profit = entry_price + atr * atr_multiplier * 2

                        sell_signal = False
                        if rsi > 70 and histogram < 0:  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –º–µ–¥–≤–µ–∂—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MACD
                            sell_signal = True
                            logger.info(f"–°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {stock.ticker}: RSI={rsi:.2f}, MACD Histogram={histogram:.2f}")
                        elif current_price >= dynamic_take_profit:  # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
                            sell_signal = True
                            logger.info(f"–°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {stock.ticker}: –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç {current_price} >= {dynamic_take_profit}")
                        elif current_price <= dynamic_stop_loss:  # –°—Ç–æ–ø-–ª–æ—Å—Å
                            sell_signal = True
                            logger.info(f"–°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {stock.ticker}: –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å {current_price} <= {dynamic_stop_loss}")

                        if sell_signal:
                            quantity = min(available_to_sell, 10)
                            total_revenue = quantity * current_price
                            order_response = await client.orders.post_order(
                                account_id=account_id,
                                figi=figi,
                                quantity=quantity,
                                direction=OrderDirection.ORDER_DIRECTION_SELL,
                                order_type=OrderType.ORDER_TYPE_MARKET
                            )
                            logger.info(f"–ü—Ä–æ–¥–∞–Ω–æ {quantity} –∞–∫—Ü–∏–π {stock.ticker} –ø–æ —Ü–µ–Ω–µ {current_price} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            self.status = f"–°–æ–≤–µ—Ä—à–∏–ª –ø—Ä–æ–¥–∞–∂—É: {quantity} –∞–∫—Ü–∏–π {stock.ticker}"
                            await self.bot.send_message(user_id, f"üìâ –ü—Ä–æ–¥–∞–Ω–æ {quantity} –∞–∫—Ü–∏–π {stock.ticker} –ø–æ —Ü–µ–Ω–µ {current_price} RUB")
                            trade = TradeHistory(
                                user_id=user_id,
                                ticker=stock.ticker,
                                action="sell",
                                price=current_price,
                                quantity=quantity,
                                total=total_revenue,
                                created_at=datetime.utcnow()
                            )
                            session.add(trade)
                            await session.commit()
                            if quantity == position["quantity"]:
                                del self.positions[figi]
                            else:
                                self.positions[figi]["quantity"] -= quantity

                    await asyncio.sleep(0.5)

                self.status = "–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞"
                logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {self.status}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            self.status = f"–û—à–∏–±–∫–∞: {str(e)}"
            error_message = html.escape(str(e))
            await self.bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏: {error_message}")
            raise

    def get_status(self):
        return self.status